---
name: "release"

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    strategy:
      matrix:
       os: [ubuntu-22.04, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pypoetry
          ~/.cache/pip
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    - name: Install Dependencies
      run: |
        make setup-installer
        poetry install
    - name: Build Executable
      run: make installer
    - name: Test Executable (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: .\dist\cover-agent.exe --help
      shell: pwsh
    - name: Test Executable (Unix)
      if: ${{ matrix.os != 'windows-latest' }}
      run: ./dist/cover-agent --help
      shell: bash
    - name: Upload Executable
      uses: actions/upload-artifact@v4
      with:
        name: cover-agent-${{ matrix.os }}
        path: dist/cover-agent*

  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Download executables (Ubuntu)
      uses: actions/download-artifact@v4
      with:
        name: cover-agent-ubuntu-22.04
        path: dist/ubuntu-22.04
    - uses: actions/download-artifact@v4
      with:
        name: cover-agent-windows-latest
        path: dist/windows-latest
    - name: Extract version
      run: |
        echo "VERSION=$(cat cover_agent/version.txt)" >> $GITHUB_ENV
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.AI_FLOWX_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        draft: false
        prerelease: false
    - name: Upload Release Asset (Ubuntu)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.AI_FLOWX_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/ubuntu-22.04/cover-agent
        asset_name: cover-agent-ubuntu
        asset_content_type: application/octet-stream
    - name: Upload Release Asset (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.AI_FLOWX_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/windows-latest/cover-agent.exe
        asset_name: cover-agent-windows.exe
        asset_content_type: application/octet-stream
